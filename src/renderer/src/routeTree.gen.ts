/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TareImport } from './routes/tare'
import { Route as ReceiptImport } from './routes/receipt'
import { Route as NameImport } from './routes/name'
import { Route as InfoImport } from './routes/info'
import { Route as CloseDoorsImport } from './routes/close-doors'
import { Route as CartImport } from './routes/cart'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TareRoute = TareImport.update({
  id: '/tare',
  path: '/tare',
  getParentRoute: () => rootRoute,
} as any)

const ReceiptRoute = ReceiptImport.update({
  id: '/receipt',
  path: '/receipt',
  getParentRoute: () => rootRoute,
} as any)

const NameRoute = NameImport.update({
  id: '/name',
  path: '/name',
  getParentRoute: () => rootRoute,
} as any)

const InfoRoute = InfoImport.update({
  id: '/info',
  path: '/info',
  getParentRoute: () => rootRoute,
} as any)

const CloseDoorsRoute = CloseDoorsImport.update({
  id: '/close-doors',
  path: '/close-doors',
  getParentRoute: () => rootRoute,
} as any)

const CartRoute = CartImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartImport
      parentRoute: typeof rootRoute
    }
    '/close-doors': {
      id: '/close-doors'
      path: '/close-doors'
      fullPath: '/close-doors'
      preLoaderRoute: typeof CloseDoorsImport
      parentRoute: typeof rootRoute
    }
    '/info': {
      id: '/info'
      path: '/info'
      fullPath: '/info'
      preLoaderRoute: typeof InfoImport
      parentRoute: typeof rootRoute
    }
    '/name': {
      id: '/name'
      path: '/name'
      fullPath: '/name'
      preLoaderRoute: typeof NameImport
      parentRoute: typeof rootRoute
    }
    '/receipt': {
      id: '/receipt'
      path: '/receipt'
      fullPath: '/receipt'
      preLoaderRoute: typeof ReceiptImport
      parentRoute: typeof rootRoute
    }
    '/tare': {
      id: '/tare'
      path: '/tare'
      fullPath: '/tare'
      preLoaderRoute: typeof TareImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/close-doors': typeof CloseDoorsRoute
  '/info': typeof InfoRoute
  '/name': typeof NameRoute
  '/receipt': typeof ReceiptRoute
  '/tare': typeof TareRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/close-doors': typeof CloseDoorsRoute
  '/info': typeof InfoRoute
  '/name': typeof NameRoute
  '/receipt': typeof ReceiptRoute
  '/tare': typeof TareRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/cart': typeof CartRoute
  '/close-doors': typeof CloseDoorsRoute
  '/info': typeof InfoRoute
  '/name': typeof NameRoute
  '/receipt': typeof ReceiptRoute
  '/tare': typeof TareRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/cart'
    | '/close-doors'
    | '/info'
    | '/name'
    | '/receipt'
    | '/tare'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/cart'
    | '/close-doors'
    | '/info'
    | '/name'
    | '/receipt'
    | '/tare'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/cart'
    | '/close-doors'
    | '/info'
    | '/name'
    | '/receipt'
    | '/tare'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  CartRoute: typeof CartRoute
  CloseDoorsRoute: typeof CloseDoorsRoute
  InfoRoute: typeof InfoRoute
  NameRoute: typeof NameRoute
  ReceiptRoute: typeof ReceiptRoute
  TareRoute: typeof TareRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  CartRoute: CartRoute,
  CloseDoorsRoute: CloseDoorsRoute,
  InfoRoute: InfoRoute,
  NameRoute: NameRoute,
  ReceiptRoute: ReceiptRoute,
  TareRoute: TareRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/cart",
        "/close-doors",
        "/info",
        "/name",
        "/receipt",
        "/tare"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx"
    },
    "/cart": {
      "filePath": "cart.tsx"
    },
    "/close-doors": {
      "filePath": "close-doors.tsx"
    },
    "/info": {
      "filePath": "info.tsx"
    },
    "/name": {
      "filePath": "name.tsx"
    },
    "/receipt": {
      "filePath": "receipt.tsx"
    },
    "/tare": {
      "filePath": "tare.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
